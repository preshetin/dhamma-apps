import requests
import os
from flask import Blueprint, request

from utils.shared_functions import send_slack_message
import json

telegram_petyavpn_bp = Blueprint('telegram_petyavpn', __name__)

TELEGRAM_BOT_TOKEN_PETYAVPN = os.environ.get('TELEGRAM_BOT_TOKEN_PETYAVPN')
API_URL = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN_PETYAVPN}'

@telegram_petyavpn_bp.route('/webhook-petyavpn', methods=['POST'])
def webhook_petyavpn():
    update = request.get_json()
    send_slack_message('some_user', 'foo', json.dumps(update))
    
    # Handle callback query
    if 'callback_query' in update:
        callback_query = update['callback_query']
        chat_id = callback_query['message']['chat']['id']

        if callback_query['data'] == 'confirm_stars_purchase':
            # Send invoice
            url = f'{API_URL}/sendInvoice'
            payload = {
                'chat_id': chat_id,
                'title': 'VPN for June, 2025',
                'description': 'Purchase 100 Telegram Stars',
                'payload': 'stars_payment',
                'currency': 'XTR',
                'prices': [{'label': '100 Stars', 'amount': 100}],
                'need_name': False,
                'need_phone_number': False,
                'need_email': False,
                'need_shipping_address': False,
            }
            requests.post(url, json=payload)
        
        if callback_query['data'] == 'pay_button_clicked':
            url = f'{API_URL}/sendMessage'
            payload = {
                'chat_id': chat_id,
                'text': "–û–ø–ª–∞—Ç–∞ VPN –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º. üåü\n\n –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @PremiumBot. \n\n –ú–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>100 –∑–≤–µ–∑–¥</b> ((~170‚ÇΩ, —Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É—Ä—Å–∞ —Ä—É–±–ª—è –∏ –∫–æ–º–∏—Å—Å–∏–∏ Telegram))  \n\n–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞",
                'parse_mode': 'html',
                'reply_markup': {
                    'inline_keyboard': [[{
                        'text': '–Ø –∫—É–ø–∏–ª(a) –∑–≤–µ–∑–¥—ã',
                        'callback_data': 'confirm_stars_purchase'
                    }]]
                }
            }
            requests.post(url, json=payload)
            
            return '', 200

    # Handle pre_checkout_query
    if 'pre_checkout_query' in update:
        pre_checkout_query_id = update['pre_checkout_query']['id']
        url = f'{API_URL}/answerPreCheckoutQuery'
        payload = {
            'pre_checkout_query_id': pre_checkout_query_id,
            'ok': True
        }
        requests.post(url, json=payload)
        return '', 200

    if 'message' in update:
        chat_id = update['message']['chat']['id']
        user_info = update['message']['from']
        user_first_name = user_info.get('first_name', '')
        user_last_name = user_info.get('last_name', '')
        user_username = user_info.get('username', '')

        # Handle successful payment
        if 'successful_payment' in update['message']:
            url = f'{API_URL}/sendMessage'
            payload = {
                'chat_id': chat_id,
                'text': "Thank you for your payment! üåü",
                'parse_mode': 'html'
            }
            requests.post(url, json=payload)
            return '', 200

        # Handle regular message
        user_message = update['message']['text']
        
        if user_message.lower() == '–æ–ø–ª–∞—Ç–∞':
            # Send invoice
            url = f'{API_URL}/sendInvoice'
            payload = {
                'chat_id': chat_id,
                'title': 'VPN for June, 2025',
                'description': 'Purchase 100 Telegram Stars',
                'payload': 'stars_payment',
                # 'provider_token': os.environ.get('TELEGRAM_PAYMENT_TOKEN'),  # You need to set this in environment variables
                'currency': 'XTR',
                'prices': [{'label': '100 Stars', 'amount': 100}],  # Amount in cents (1 USD)
                'need_name': False,
                'need_phone_number': False,
                'need_email': False,
                'need_shipping_address': False,
            }
            requests.post(url, json=payload)
        else:
            # Regular message handling
            url = f'{API_URL}/sendMessage'
            formatted_text = user_message
            payload = {
                'chat_id': chat_id,
                'text': f"–Ø –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É–º–µ–Ω—é –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É. \n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏ –ü–µ—Ç–µ @preshetin",
                'parse_mode': 'html',
                'reply_markup': {
                    'inline_keyboard': [[{
                        'text': '–û–ø–ª–∞—Ç–∏—Ç—å',
                        'callback_data': 'pay_button_clicked'
                    }]]
                }
            }
            requests.post(url, json=payload)

    return '', 200
